/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package emuladorsql.ui;

import emuladorsql.jflex.Secundario.ManejadorCsv;
import emuladorsql.jflex.Secundario.verificarPyC;
import emuladorsql.ManejadorSQL.ManejadorDeEntrada;
import java.awt.event.MouseAdapter;

import emuladorsql.cup.Componente;
import emuladorsql.manejadorArchivo.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author sergio
 */
public class PantallaPrincipal extends javax.swing.JFrame {

    private File file;
    private Componente raiz;
    private static final DefaultMutableTreeNode DUMMIE = new DefaultMutableTreeNode("Right Click + Leaf");
    private String consulta = "";
    private ArrayList<DefaultMutableTreeNode> tabsAbiertos = new ArrayList<>();
    private String consultaAnterior = null;

    /**
     * Creates new form PantallaPrincipal
     */
    public PantallaPrincipal() {
        initComponents();
        enterEvent(this);
        upEvent(this);
        txtCampoPrin.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        tabs = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtConsultas = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtCampoPrin = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtAreaSql = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuNew = new javax.swing.JMenuItem();
        menuOpen = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Ctrl+O ->Open");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(jTree1);

        txtConsultas.setEditable(false);
        txtConsultas.setBackground(new java.awt.Color(79, 78, 102));
        txtConsultas.setColumns(20);
        txtConsultas.setFont(new java.awt.Font("Noto Sans CJK TC Thin", 0, 16)); // NOI18N
        txtConsultas.setForeground(new java.awt.Color(254, 254, 254));
        txtConsultas.setRows(5);
        txtConsultas.setText("\n");
        jScrollPane3.setViewportView(txtConsultas);

        jScrollPane2.setViewportView(jScrollPane3);

        txtCampoPrin.setBackground(new java.awt.Color(79, 78, 102));
        txtCampoPrin.setColumns(20);
        txtCampoPrin.setFont(new java.awt.Font("Noto Sans CJK TC Thin", 0, 16)); // NOI18N
        txtCampoPrin.setForeground(new java.awt.Color(254, 254, 254));
        txtCampoPrin.setRows(1);
        txtCampoPrin.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane4.setViewportView(txtCampoPrin);

        txtAreaSql.setEditable(false);
        txtAreaSql.setBackground(new java.awt.Color(79, 78, 102));
        txtAreaSql.setColumns(2);
        txtAreaSql.setFont(new java.awt.Font("Noto Sans CJK TC Thin", 0, 16)); // NOI18N
        txtAreaSql.setForeground(new java.awt.Color(254, 254, 254));
        txtAreaSql.setRows(1);
        txtAreaSql.setText("sql>");
        jScrollPane5.setViewportView(txtAreaSql);

        jMenu1.setText("File");

        menuNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuNew.setText("New");
        menuNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewActionPerformed(evt);
            }
        });
        jMenu1.add(menuNew);

        menuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuOpen.setText("Open");
        menuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenActionPerformed(evt);
            }
        });
        jMenu1.add(menuOpen);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabs)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                            .addComponent(jScrollPane4))
                        .addGap(30, 30, 30)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.showOpenDialog(this);
        file = fileChooser.getSelectedFile();
        if (file != null) {
            IngresoNombre ingresoNombre = new IngresoNombre(this, true, file.getPath());
            ingresoNombre.setVisible(true);
            if (ingresoNombre.getFile() != null) {
                ManejadorIde mi = new ManejadorIde();
                mi.abrirProyectoIde(ingresoNombre.getFile(), this);
            }
        }

    }//GEN-LAST:event_menuNewActionPerformed

    private void menuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.showOpenDialog(this);

        file = fileChooser.getSelectedFile();
        if (file != null) {

            leerFile();
            txtCampoPrin.setEditable(true);
        }

    }//GEN-LAST:event_menuOpenActionPerformed
    public void escribirLinea(String linea) {
        txtConsultas.append(linea + "\n");
    }

    public File getFile() {
        return file;
    }

    protected void borrarArbol() {
        jTree1.removeAll();
        jTree1.setModel(new DefaultTreeModel(new DefaultMutableTreeNode("Crtl+O open")));
    }

    public void actaulizarTabs() {
        tabs.removeAll();
        ManejadorCsv mc = new ManejadorCsv();
        for (int i = 0; i < tabsAbiertos.size(); i++) {
            mc.agregarArchivo(((Componente) tabsAbiertos.get(i).getUserObject()), tabs);
        }
    }

    private void leerFile() {

        ManejadorIde manejadorIde = new ManejadorIde();
        manejadorIde.abrirProyectoIde(file, this);
    }

    public void recibirRaiz(Componente raiz) {
        this.raiz = raiz;
        dibujarArbol();
    }

    private void dibujarArbol() {
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode(raiz);
        ArrayList<Componente> comp = raiz.getComponetes();
        if (comp != null) {
            for (int i = 0; i < comp.size(); i++) {
                agregarNodo(raiz.getComponetes().get(i), treeNode1);
            }
        } else {

            treeNode1.add(DUMMIE);
        }

        jTree1.setModel(new DefaultTreeModel(treeNode1));
        agregarMouseLisener();
    }

    private void agregarNodo(Componente com, DefaultMutableTreeNode treeNode) {
        DefaultMutableTreeNode tN = new DefaultMutableTreeNode(com);

        if (com.getComponetes() != null) {
            for (int i = 0; i < com.getComponetes().size(); i++) {
                System.out.println(com.getComponetes().get(i).getNombre() + " " + com.getComponetes().get(i).getComponetes() + " " + com.getComponetes().get(i).getUbicacion());
                if (com.getComponetes().get(i).getComponetes() != null) {
                    agregarNodo(com.getComponetes().get(i), tN);
                } else {
                    DefaultMutableTreeNode tN2 = new DefaultMutableTreeNode(com.getComponetes().get(i));

                    if (com.getComponetes().get(i).getUbicacion() == null) {
                        DefaultMutableTreeNode dum = new DefaultMutableTreeNode(DUMMIE.getUserObject());
                        tN2.add(dum);
                    }
                    tN.add(tN2);
                }

            }
        } else {
            if (com.getUbicacion() == null) {
                DefaultMutableTreeNode dum = new DefaultMutableTreeNode(DUMMIE.getUserObject());

                tN.add(dum);
            }
        }

        treeNode.add(tN);

    }

    private void enterEvent(PantallaPrincipal pp) {
        txtCampoPrin.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    if (consulta==null||"".equals(consulta)) {
                        txtConsultas.append("sql>"+txtCampoPrin.getText());
                    }else{
                        txtConsultas.append("    >"+txtCampoPrin.getText());
                    }
                    
                    String aux = txtCampoPrin.getText();
                    consultaAnterior = aux;
                    txtCampoPrin.setText("");

                    verificarPyC vPyC = new verificarPyC();
                    if (vPyC.verificarPuntoyComa(aux)) {
                        aux = consulta + aux;
                        consulta = "";
                        txtAreaSql.setText("sql>");
                        
                        ManejadorDeEntrada mde = new ManejadorDeEntrada();
                        mde.leerEntrada(aux.replace("\n", " "), pp);
                    } else {
                        consulta += aux;
                        txtAreaSql.setText("    >");
                    }

                }
            }
        });
    }

    private void upEvent(PantallaPrincipal pp) {
        txtCampoPrin.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_UP) {

                    if (consultaAnterior != null) {
                        txtCampoPrin.setText(consultaAnterior);
                    }
                }
            }
        });
    }

    private void agregarMouseLisener() {
        jTree1.getSelectionModel().setSelectionMode(
                TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);

        jTree1.addMouseListener(new MyMouseAdapter());
    }

    private class MyMouseAdapter extends MouseAdapter {

        private void myPopupEvent(MouseEvent e) {
            int x = e.getX();
            int y = e.getY();
            JTree tree = (JTree) e.getSource();
            TreePath path = tree.getPathForLocation(x, y);
            if (path == null) {
                return;
            }
            DefaultMutableTreeNode rightClickedNode = (DefaultMutableTreeNode) path
                    .getLastPathComponent();

            TreePath[] selectionPaths = tree.getSelectionPaths();

            boolean isSelected = false;
            if (selectionPaths != null) {
                for (TreePath selectionPath : selectionPaths) {
                    if (selectionPath.equals(path)) {
                        isSelected = true;
                    }
                }
            }
            if (!isSelected) {
                tree.setSelectionPath(path);
            }
            if (rightClickedNode != DUMMIE && !rightClickedNode.getUserObject().equals(DUMMIE.getUserObject())) {
                if (rightClickedNode.isLeaf()) {
                    JPopupMenu popup = new JPopupMenu();
                    final JMenuItem refreshMenuItem = new JMenuItem("Open");
                    refreshMenuItem.addActionListener(ev -> openArchivo(rightClickedNode, tabsAbiertos));
                    popup.add(refreshMenuItem);

                    final JMenuItem refreshMenuItem2 = new JMenuItem("Delete");
                    refreshMenuItem2.addActionListener(ev -> borrarCarpeta(rightClickedNode.getPath(), PantallaPrincipal.this));
                    popup.add(refreshMenuItem2);
                    popup.show(tree, x, y);
                } else {
                    JPopupMenu popup = new JPopupMenu();
                    final JMenuItem refreshMenuItem = new JMenuItem("New File");
                    refreshMenuItem.addActionListener(ev -> agregarArchivo(rightClickedNode.getPath(), PantallaPrincipal.this, rightClickedNode.isRoot()));

                    popup.add(refreshMenuItem);

                    final JMenuItem refreshMenuItem2 = new JMenuItem("New Carpet");
                    refreshMenuItem2.addActionListener(ev -> agregarCarpeta(rightClickedNode.getPath(), PantallaPrincipal.this, rightClickedNode.isRoot()));
                    popup.add(refreshMenuItem2);

                    if (rightClickedNode.isRoot()) {
                        final JMenuItem refreshMenuItem3 = new JMenuItem("Close");
                        refreshMenuItem3.addActionListener(ev -> cerrarProyecto());
                        popup.add(refreshMenuItem3);
                        popup.show(tree, x, y);
                    } else {
                        final JMenuItem refreshMenuItem3 = new JMenuItem("Delete");
                        refreshMenuItem3.addActionListener(ev -> borrarCarpeta(rightClickedNode.getPath(), PantallaPrincipal.this));
                        popup.add(refreshMenuItem3);
                        popup.show(tree, x, y);
                    }
                }

            }

        }

        public void cerrarProyecto() {
            file = null;
            PantallaPrincipal.this.borrarArbol();
        }

        public void agregarCarpeta(TreeNode[] dmtn, PantallaPrincipal pp, boolean ruta) {
            String sPath = file.getPath();
            System.out.println(dmtn.length);
            for (int i = 1; i < dmtn.length; i++) {
                sPath += "/" + dmtn[i];
            }
            NombreArchivoNuevo nan = new NombreArchivoNuevo(PantallaPrincipal.this, rootPaneCheckingEnabled, NombreArchivoNuevo.TIPO_CARPETA, sPath, dmtn[dmtn.length - 1], file, ruta);
            nan.setVisible(true);
            if (nan.isIngresado()) {

                ManejadorIde manejadorIde = new ManejadorIde();
                manejadorIde.abrirProyectoIde(file, pp);
            }
        }

        public void borrarCarpeta(TreeNode[] dmtn, PantallaPrincipal pp) {
            if (dmtn[dmtn.length - 1].isLeaf()) {
                ConfirmacionDeEliminacion cde = new ConfirmacionDeEliminacion(pp, rootPaneCheckingEnabled, dmtn[dmtn.length - 1].toString());
                cde.setVisible(true);
                if (cde.isConfirmancion()) {
                    new EditadorIde().borrarCarpeta(file, dmtn, pp);
                    leerFile();
                }
            } else {
                new EditadorIde().borrarCarpeta(file, dmtn, pp);
                leerFile();
            }
        }

        public void agregarArchivo(TreeNode[] dmtn, PantallaPrincipal pp, boolean raiz) {
            String sPath = file.getPath();
            for (int i = 1; i < dmtn.length; i++) {
                sPath += "/" + dmtn[i];

            }
            NombreArchivoNuevo nan = new NombreArchivoNuevo(PantallaPrincipal.this, rootPaneCheckingEnabled, NombreArchivoNuevo.TIPO_ARCHIVO, sPath, dmtn[dmtn.length - 1], file, false);
            nan.setVisible(true);

            if (nan.isIngresado()) {
                String pathArch = nan.getPath();
                String nombre = nan.getNombre();
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
                fileChooser.showOpenDialog(PantallaPrincipal.this);

                File file1 = fileChooser.getSelectedFile();
                if (file1 != null) {
                    if (file1.isFile()) {
                        if (file1.getPath().endsWith(".csv")) {
                            EditadorIde ei = new EditadorIde();
                            ei.agregarArchivo(pathArch, dmtn[dmtn.length - 1], file, file1.getPath(), raiz);

                            leerFile();
                        } else {
                            JOptionPane.showMessageDialog(PantallaPrincipal.this, "El Archivo Debe ser .csv", "Error Al Abrir Archivo", JOptionPane.ERROR_MESSAGE);
                        }

                    } else {
                        IngresoDeColumnas idc = new IngresoDeColumnas(pp, true);
                        idc.setVisible(true);
                        ArrayList<String> nuevasColumnas = idc.getColumnas();
                        CreadorDeArchivosCsv cdac = new CreadorDeArchivosCsv();
                        if (cdac.crearCsv(nuevasColumnas, file1.getPath(), nombre)) {
                            EditadorIde ei = new EditadorIde();
                            ei.agregarArchivo(pathArch, dmtn[dmtn.length - 1], file, file1.getPath() + "/" + nombre + ".csv", raiz);
                            leerFile();
                        }
                    }

                }

            }
        }

        @Override
        public void mousePressed(MouseEvent e) {
            if (e.isPopupTrigger()) {
                myPopupEvent(e);
            }
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            if (e.isPopupTrigger()) {
                myPopupEvent(e);
            }
        }

        public void openArchivo(DefaultMutableTreeNode dtm, ArrayList<DefaultMutableTreeNode> tabsAbiertos) {
            ManejadorCsv cs = new ManejadorCsv();
            if (cs.agregarArchivo(((Componente) dtm.getUserObject()), tabs) == false) {
                JOptionPane.showMessageDialog(PantallaPrincipal.this, "Error Al Abrir Archivo", "Error", JOptionPane.ERROR_MESSAGE);

            } else {
                tabsAbiertos.add(dtm);
            }

        }

    }

    public void recibirSinPuntoyComa(String sinPC) {
        consulta += sinPC;
        txtConsultas.append(sinPC + "\n");
        txtCampoPrin.setText("");
        txtAreaSql.setText(">");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTree jTree1;
    private javax.swing.JMenuItem menuNew;
    private javax.swing.JMenuItem menuOpen;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTextArea txtAreaSql;
    private javax.swing.JTextArea txtCampoPrin;
    private javax.swing.JTextArea txtConsultas;
    // End of variables declaration//GEN-END:variables
}
