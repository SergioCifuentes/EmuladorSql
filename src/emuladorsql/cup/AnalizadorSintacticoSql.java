//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 19 05:19:26 CST 2020
//----------------------------------------------------
package emuladorsql.cup;

import emuladorsql.ManejadorSQL.Actualizar;
import emuladorsql.ManejadorSQL.Consulta;
import emuladorsql.ManejadorSQL.Eliminar;
import emuladorsql.ManejadorSQL.Filtracion;
import emuladorsql.ManejadorSQL.Insertar;
import emuladorsql.ManejadorSQL.Select;
import emuladorsql.ui.PantallaPrincipal;
import java_cup.runtime.Symbol;
import java.util.ArrayList;

/**
 * CUP v0.11a beta 20060608 generated parser.
 *
 * @version Wed Feb 19 05:19:26 CST 2020
 */
public class AnalizadorSintacticoSql extends java_cup.runtime.lr_parser {

    /**
     * Default constructor.
     */
    public AnalizadorSintacticoSql() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    public AnalizadorSintacticoSql(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public AnalizadorSintacticoSql(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\042\000\002\002\004\000\002\002\003\000\002\003"
        + "\005\000\002\003\005\000\002\003\002\000\002\004\007"
        + "\000\002\004\012\000\002\004\010\000\002\004\006\000"
        + "\002\007\007\000\002\007\005\000\002\010\005\000\002"
        + "\010\002\000\002\011\007\000\002\011\005\000\002\011"
        + "\003\000\002\012\005\000\002\012\003\000\002\005\003"
        + "\000\002\005\003\000\002\013\005\000\002\013\003\000"
        + "\002\006\004\000\002\006\002\000\002\015\007\000\002"
        + "\015\005\000\002\016\003\000\002\016\003\000\002\014"
        + "\003\000\002\014\003\000\002\014\003\000\002\014\003"
        + "\000\002\014\003\000\002\014\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\112\000\016\002\ufffd\003\005\004\007\005\004\006"
        + "\013\007\011\001\002\000\004\010\072\001\002\000\004"
        + "\014\070\001\002\000\004\002\000\001\002\000\006\022"
        + "\061\034\062\001\002\000\004\014\055\001\002\000\004"
        + "\010\052\001\002\000\004\002\051\001\002\000\004\010"
        + "\014\001\002\000\004\035\015\001\002\000\004\012\016"
        + "\001\002\000\004\034\017\001\002\000\004\017\045\001"
        + "\002\000\006\011\021\014\uffea\001\002\000\004\034\024"
        + "\001\002\000\004\014\ufffa\001\002\000\004\014\uffeb\001"
        + "\002\000\016\017\027\026\026\027\030\030\025\031\032"
        + "\032\031\001\002\000\006\021\uffe0\036\uffe0\001\002\000"
        + "\006\021\uffe2\036\uffe2\001\002\000\006\021\uffe5\036\uffe5"
        + "\001\002\000\006\021\uffe1\036\uffe1\001\002\000\006\021"
        + "\uffe3\036\uffe3\001\002\000\006\021\uffe4\036\uffe4\001\002"
        + "\000\006\021\036\036\034\001\002\000\014\011\ufff0\014"
        + "\ufff0\020\ufff0\024\ufff0\025\ufff0\001\002\000\010\014\uffe8"
        + "\024\041\025\043\001\002\000\004\034\037\001\002\000"
        + "\004\021\040\001\002\000\014\011\ufff1\014\ufff1\020\ufff1"
        + "\024\ufff1\025\ufff1\001\002\000\004\034\uffe7\001\002\000"
        + "\004\034\024\001\002\000\004\034\uffe6\001\002\000\004"
        + "\014\uffe9\001\002\000\006\021\036\036\034\001\002\000"
        + "\010\011\ufff7\014\ufff7\020\047\001\002\000\004\034\017"
        + "\001\002\000\006\011\ufff8\014\ufff8\001\002\000\004\002"
        + "\001\001\002\000\004\035\053\001\002\000\006\011\021"
        + "\014\uffea\001\002\000\004\014\ufff9\001\002\000\016\002"
        + "\ufffd\003\005\004\007\005\004\006\013\007\011\001\002"
        + "\000\004\002\uffff\001\002\000\004\010\uffee\001\002\000"
        + "\004\010\065\001\002\000\004\010\uffef\001\002\000\010"
        + "\010\uffec\016\uffec\020\063\001\002\000\004\034\062\001"
        + "\002\000\006\010\uffed\016\uffed\001\002\000\004\035\066"
        + "\001\002\000\006\011\021\014\uffea\001\002\000\004\014"
        + "\ufffc\001\002\000\016\002\ufffd\003\005\004\007\005\004"
        + "\006\013\007\011\001\002\000\004\002\ufffe\001\002\000"
        + "\004\035\073\001\002\000\006\013\ufff5\015\074\001\002"
        + "\000\004\034\062\001\002\000\004\013\076\001\002\000"
        + "\004\015\077\001\002\000\006\021\103\036\100\001\002"
        + "\000\006\016\ufff0\020\111\001\002\000\004\016\ufff2\001"
        + "\002\000\004\016\110\001\002\000\004\034\104\001\002"
        + "\000\004\021\105\001\002\000\006\016\ufff1\020\106\001"
        + "\002\000\006\021\103\036\100\001\002\000\004\016\ufff4"
        + "\001\002\000\004\014\ufffb\001\002\000\006\021\103\036"
        + "\100\001\002\000\004\016\ufff3\001\002\000\004\016\114"
        + "\001\002\000\004\013\ufff6\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\112\000\010\002\011\003\005\004\007\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\006"
        + "\005\057\013\056\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\004\007\017\001\001\000\002\001"
        + "\001\000\004\006\021\001\001\000\004\015\022\001\001"
        + "\000\002\001\001\000\002\001\001\000\004\014\032\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\004\012\034\001\001\000\002\001\001\000\004\016\041"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\015\043\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\012\045\001\001\000"
        + "\002\001\001\000\004\007\047\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\004\006\053\001"
        + "\001\000\002\001\001\000\006\003\055\004\007\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\004\013\063\001\001"
        + "\000\002\001\001\000\002\001\001\000\004\006\066\001"
        + "\001\000\002\001\001\000\006\003\070\004\007\001\001"
        + "\000\002\001\001\000\002\001\001\000\004\010\074\001"
        + "\001\000\004\013\112\001\001\000\002\001\001\000\002"
        + "\001\001\000\006\011\101\012\100\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\006\011\106\012"
        + "\100\001\001\000\002\001\001\000\002\001\001\000\006"
        + "\011\111\012\100\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$AnalizadorSintacticoSql$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$AnalizadorSintacticoSql$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$AnalizadorSintacticoSql$do_action(act_num, parser, stack, top, this);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    public PantallaPrincipal pp;
    public String sinPuntoyComa;
    public ArrayList<Consulta> consultas= new ArrayList<>();

    public void syntax_error(Symbol s) {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        pp.escribirLinea("Error Sintactico Recuperado \n" + "\t \tLexema: " + lexema + "\n \t \tFila: " + fila + "\n \t \tColumna: " + columna);

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        if (s != null) {

            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
            pp.escribirLinea("Error Sintactico Recuperado \n" + "\t \tLexema: " + lexema + "\n \t \tFila: " + fila + "\n \t \tColumna: " + columna);

        }
    }

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$AnalizadorSintacticoSql$actions {

    private final AnalizadorSintacticoSql parser;

    /**
     * Constructor
     */
    CUP$AnalizadorSintacticoSql$actions(AnalizadorSintacticoSql parser) {
        this.parser = parser;
    }

    /**
     * Method with the actual generated action code.
     */
    public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoSql$do_action(
            int CUP$AnalizadorSintacticoSql$act_num,
            java_cup.runtime.lr_parser CUP$AnalizadorSintacticoSql$parser,
            java.util.Stack CUP$AnalizadorSintacticoSql$stack,
            int CUP$AnalizadorSintacticoSql$top, AnalizadorSintacticoSql ass)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$AnalizadorSintacticoSql$result;

        /* select the action based on the action number */
        switch (CUP$AnalizadorSintacticoSql$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // op ::= DIF 
            {
                Object RESULT = null;
                int opleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int opright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                Object op = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                RESULT = op;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("op", 10, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // op ::= CERIG 
            {
                Object RESULT = null;
                int opleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int opright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                Object op = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                RESULT = op;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("op", 10, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // op ::= ABRIG 
            {
                Object RESULT = null;
                int opleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int opright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                Object op = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                RESULT = op;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("op", 10, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // op ::= CER 
            {
                Object RESULT = null;
                int opleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int opright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                Object op = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                RESULT = op;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("op", 10, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // op ::= ABR 
            {
                Object RESULT = null;
                int opleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int opright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                Object op = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                RESULT = op;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("op", 10, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // op ::= IGU 
            {
                Object RESULT = null;
                int opleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int opright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                Object op = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                RESULT = op;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("op", 10, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // OpLog ::= OR 
            {
                Object RESULT = null;
                int OpLogleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int OpLogright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                Object OpLog = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                RESULT = OpLog;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("OpLog", 12, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // OpLog ::= AND 
            {
                Object RESULT = null;
                int OpLogleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int OpLogright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                Object OpLog = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                RESULT = OpLog;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("OpLog", 12, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // relacional ::= NOMBRE op valUnico 
            {
                Object RESULT = null;
                int colleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)).left;
                int colright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)).right;
                String col = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).right;
                Object op = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).value;
                int valleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                Object val = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                Filtracion f = new Filtracion((String) col, ((ArrayList<String>) val).get(0), Filtracion.operadorAtipo((String) op), null);
                ArrayList<Filtracion> fs = new ArrayList<>();
                fs.add(f);
                RESULT = fs;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("relacional", 11, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // relacional ::= NOMBRE op valUnico OpLog relacional 
            {
                Object RESULT = null;
                int colleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 4)).left;
                int colright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 4)).right;
                String col = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 4)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 3)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 3)).right;
                Object op = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 3)).value;
                int valleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)).left;
                int valright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)).right;
                Object val = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)).value;
                int OpLogleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).left;
                int OpLogright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).right;
                Object OpLog = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).value;
                int relleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int relright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                Object rel = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                Filtracion f = new Filtracion((String) col, (String) val, Filtracion.operadorAtipo((String) op), (String) OpLog);
                ArrayList<Filtracion> filtraciones = new ArrayList<>();
                filtraciones.add(f);
                for (int i = 0; i < ((ArrayList<Filtracion>) rel).size(); i++) {
                    filtraciones.add(((ArrayList<Filtracion>) rel).get(i));
                }
                RESULT = filtraciones;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("relacional", 11, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 4)), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // Filtracion ::= 
            {
                Object RESULT = null;
                RESULT = null;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("Filtracion", 4, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // Filtracion ::= FILTRAR relacional 
            {
                Object RESULT = null;
                int filtracionesleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int filtracionesright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                Object filtraciones = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                ArrayList<Filtracion> fil = new ArrayList<>();
                for (int i = 0; i < ((ArrayList<Filtracion>) filtraciones).size(); i++) {
                    fil.add(((ArrayList<Filtracion>) filtraciones).get(i));
                    RESULT = fil;
                }
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("Filtracion", 4, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // columnasNom ::= NOMBRE 
            {
                Object RESULT = null;
                int nomleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int nomright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                String nom = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                ArrayList<String> columnas = new ArrayList<>();
                columnas.add(nom);
                RESULT = columnas;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("columnasNom", 9, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // columnasNom ::= NOMBRE COMA columnasNom 
            {
                Object RESULT = null;
                int nomleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)).left;
                int nomright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)).right;
                String nom = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)).value;
                int colNomleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int colNomright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                Object colNom = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                ArrayList<String> columnas = new ArrayList<>();
                columnas.add(nom);
                for (int i = 0; i < ((ArrayList<String>) colNom).size(); i++) {
                    columnas.add(((ArrayList<String>) colNom).get(i));
                }
                RESULT = columnas;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("columnasNom", 9, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // columnas ::= columnasNom 
            {
                Object RESULT = null;
                int colNomleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int colNomright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                Object colNom = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                RESULT = colNom;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("columnas", 3, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // columnas ::= POR 
            {
                Object RESULT = null;
                int columnasleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int columnasright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                Object columnas = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                RESULT = null;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("columnas", 3, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // valUnico ::= NUM 
            {
                Object RESULT = null;
                int NUMleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int NUMright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                String NUM = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                ArrayList<String> val = new ArrayList<>();
                val.add(NUM);
                RESULT = val;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("valUnico", 8, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // valUnico ::= COM NOMBRE COM 
            {
                Object RESULT = null;
                int NOMBREleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).left;
                int NOMBREright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).right;
                String NOMBRE = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).value;
                ArrayList<String> val = new ArrayList<>();
                val.add(NOMBRE);
                RESULT = val;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("valUnico", 8, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // val ::= valUnico 
            {
                Object RESULT = null;
                int valUnicoleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int valUnicoright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                Object valUnico = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                RESULT = valUnico;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("val", 7, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // val ::= NUM COMA val 
            {
                Object RESULT = null;
                int NUMleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)).left;
                int NUMright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)).right;
                String NUM = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)).value;
                int valsleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int valsright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                Object vals = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                ArrayList<String> valores = new ArrayList<>();
                valores.add((String) NUM);
                for (int i = 0; i < ((ArrayList<String>) vals).size(); i++) {
                    valores.add(((ArrayList<String>) vals).get(i));
                }
                RESULT = valores;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("val", 7, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // val ::= COM NOMBRE COM COMA val 
            {
                Object RESULT = null;
                int NOMBREleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 3)).left;
                int NOMBREright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 3)).right;
                String NOMBRE = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 3)).value;
                int valsleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int valsright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                Object vals = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                ArrayList<String> valores = new ArrayList<>();
                valores.add((String) NOMBRE);
                for (int i = 0; i < ((ArrayList<String>) vals).size(); i++) {
                    valores.add(((ArrayList<String>) vals).get(i));
                }
                RESULT = valores;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("val", 7, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 4)), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // columIns ::= 
            {
                Object RESULT = null;
                RESULT = null;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("columIns", 6, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // columIns ::= PARA columnasNom PARC 
            {
                Object RESULT = null;
                int colleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).left;
                int colright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).right;
                Object col = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).value;
                RESULT = col;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("columIns", 6, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // asignacion ::= NOMBRE IGU valUnico 
            {
                Object RESULT = null;
                int NOMleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)).left;
                int NOMright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)).right;
                String NOM = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)).value;
                int valleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                Object val = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                ArrayList<String> as = new ArrayList<>();
                as.add((String) NOM);
                as.add(((ArrayList<String>)val).get(0));
                
                RESULT = as;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("asignacion", 5, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // asignacion ::= NOMBRE IGU valUnico COMA asignacion 
            {
                Object RESULT = null;
                int NOMleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 4)).left;
                int NOMright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 4)).right;
                String NOM = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 4)).value;
                int valleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)).left;
                int valright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)).right;
                Object val = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)).value;
                int asleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int asright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                Object as = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                ArrayList<String> asignaciones = new ArrayList<>();
                asignaciones.add(NOM);
                asignaciones.add((String) val);
                for (int i = 0; i < ((ArrayList<String>) as).size();
                        i++) {
                    asignaciones.add(((ArrayList<String>) as).get(i));
                }
                RESULT = asignaciones;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("asignacion", 5, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 4)), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // E ::= ELIMINAR EN PATH Filtracion 
            {
                Object RESULT = null;
                int pathleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).left;
                int pathright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).right;
                String path = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).value;
                int filtracionleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int filtracionright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                Object filtracion = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                Eliminar eliminar = new Eliminar((ArrayList<Filtracion>) filtracion, null, (String) path);
                RESULT = eliminar;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("E", 2, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 3)), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // E ::= ACTUALIZAR EN PATH ASIGNAR asignacion Filtracion 
            {
                Object RESULT = null;
                int pathleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 3)).left;
                int pathright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 3)).right;
                String path = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 3)).value;
                int asigleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).left;
                int asigright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).right;
                Object asig = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).value;
                int filtracionleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int filtracionright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                Object filtracion = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                Actualizar actualizar = new Actualizar((ArrayList<String>) asig, (ArrayList<Filtracion>) filtracion, null, (String) path);
                RESULT = actualizar;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("E", 2, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 5)), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // E ::= INSERTAR EN PATH columIns VALORES PARA val PARC 
            {
                Object RESULT = null;
                int pathleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 5)).left;
                int pathright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 5)).right;
                String path = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 5)).value;
                int colleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 4)).left;
                int colright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 4)).right;
                Object col = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 4)).value;
                int valoresleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).left;
                int valoresright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).right;
                Object valores = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).value;
                Insertar insertar = new Insertar((ArrayList<String>) col, (ArrayList<String>) valores, null, (String) path);
                RESULT = insertar;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("E", 2, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 7)), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // E ::= SELECCIONAR columnas EN PATH Filtracion 
            {
                Object RESULT = null;
                int colleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 3)).left;
                int colright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 3)).right;
                Object col = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 3)).value;
                int pathleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).left;
                int pathright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).right;
                String path = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).value;
                int fleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int fright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                Object f = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                Select s = new Select((ArrayList<String>) col, (ArrayList<Filtracion>) f, null, (String) path);
                RESULT = s;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("E", 2, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 4)), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // S ::= 
            {
                Object RESULT = null;
System.out.println("Vacio");
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("S", 1, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // S ::= error PC S 
            {
                Object RESULT = null;
System.out.println("error");
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("S", 1, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // S ::= E PC S 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)).value;
                int sleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).left;
                int sright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).right;
                Object s = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
                ass.consultas.add((Consulta) e);
                System.out.println("Consulta");
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("S", 1, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 2)), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // Inicio ::= S 
            {
                Object RESULT = null;

                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("Inicio", 0, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintacticoSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // $START ::= Inicio EOF 
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).left;
                int start_valright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).right;
                Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)).value;
                RESULT = start_val;
                CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top - 1)), ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
            /* ACCEPT */
            CUP$AnalizadorSintacticoSql$parser.done_parsing();
            return CUP$AnalizadorSintacticoSql$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}
