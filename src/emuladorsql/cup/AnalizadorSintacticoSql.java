
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 17 19:37:57 CST 2020
//----------------------------------------------------

package emuladorsql.cup;

import emuladorsql.ManejadorSQL.Actualizar;
import emuladorsql.ManejadorSQL.Consulta;
import emuladorsql.ManejadorSQL.Eliminar;
import emuladorsql.ManejadorSQL.Filtracion;
import emuladorsql.ManejadorSQL.Insertar;
import emuladorsql.ManejadorSQL.Select;
import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 17 19:37:57 CST 2020
  */
public class AnalizadorSintacticoSql extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoSql() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoSql(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoSql(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\004\000\002\004\007\000\002\004\012" +
    "\000\002\004\010\000\002\004\006\000\002\007\007\000" +
    "\002\007\005\000\002\010\005\000\002\010\002\000\002" +
    "\011\007\000\002\011\005\000\002\011\003\000\002\012" +
    "\005\000\002\012\003\000\002\005\003\000\002\005\003" +
    "\000\002\013\005\000\002\013\003\000\002\006\004\000" +
    "\002\006\002\000\002\015\007\000\002\015\005\000\002" +
    "\016\003\000\002\016\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\012\004\006\005\004\006\012\007\007\001" +
    "\002\000\004\010\067\001\002\000\004\002\000\001\002" +
    "\000\006\023\060\035\061\001\002\000\004\010\053\001" +
    "\002\000\004\015\051\001\002\000\004\002\050\001\002" +
    "\000\004\010\013\001\002\000\004\036\014\001\002\000" +
    "\004\012\015\001\002\000\004\035\016\001\002\000\004" +
    "\020\044\001\002\000\006\011\020\015\uffeb\001\002\000" +
    "\004\035\023\001\002\000\004\015\ufffb\001\002\000\004" +
    "\015\uffec\001\002\000\016\020\026\027\025\030\027\031" +
    "\024\032\031\033\030\001\002\000\006\022\uffe1\037\uffe1" +
    "\001\002\000\006\022\uffe3\037\uffe3\001\002\000\006\022" +
    "\uffe6\037\uffe6\001\002\000\006\022\uffe2\037\uffe2\001\002" +
    "\000\006\022\uffe4\037\uffe4\001\002\000\006\022\uffe5\037" +
    "\uffe5\001\002\000\006\022\035\037\033\001\002\000\014" +
    "\011\ufff1\015\ufff1\021\ufff1\025\ufff1\026\ufff1\001\002\000" +
    "\010\015\uffe9\025\040\026\042\001\002\000\004\035\036" +
    "\001\002\000\004\022\037\001\002\000\014\011\ufff2\015" +
    "\ufff2\021\ufff2\025\ufff2\026\ufff2\001\002\000\004\035\uffe8" +
    "\001\002\000\004\035\023\001\002\000\004\035\uffe7\001" +
    "\002\000\004\015\uffea\001\002\000\006\022\035\037\033" +
    "\001\002\000\010\011\ufff8\015\ufff8\021\046\001\002\000" +
    "\004\035\016\001\002\000\006\011\ufff9\015\ufff9\001\002" +
    "\000\004\002\001\001\002\000\014\002\ufffe\004\006\005" +
    "\004\006\012\007\007\001\002\000\004\002\uffff\001\002" +
    "\000\004\036\054\001\002\000\006\011\020\015\uffeb\001" +
    "\002\000\004\015\ufffa\001\002\000\004\010\uffef\001\002" +
    "\000\004\010\064\001\002\000\004\010\ufff0\001\002\000" +
    "\010\010\uffed\017\uffed\021\062\001\002\000\004\035\061" +
    "\001\002\000\006\010\uffee\017\uffee\001\002\000\004\036" +
    "\065\001\002\000\006\011\020\015\uffeb\001\002\000\004" +
    "\015\ufffd\001\002\000\004\036\070\001\002\000\006\013" +
    "\ufff6\016\072\001\002\000\004\013\075\001\002\000\004" +
    "\035\061\001\002\000\004\017\074\001\002\000\004\013" +
    "\ufff7\001\002\000\004\016\076\001\002\000\006\022\102" +
    "\037\077\001\002\000\006\017\ufff1\021\110\001\002\000" +
    "\004\017\ufff3\001\002\000\004\017\107\001\002\000\004" +
    "\035\103\001\002\000\004\022\104\001\002\000\006\017" +
    "\ufff2\021\105\001\002\000\006\022\102\037\077\001\002" +
    "\000\004\017\ufff5\001\002\000\004\015\ufffc\001\002\000" +
    "\006\022\102\037\077\001\002\000\004\017\ufff4\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\010\002\010\003\004\004\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\056\013\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\016\001\001\000\002\001\001\000\004\006" +
    "\020\001\001\000\004\015\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\033\001" +
    "\001\000\002\001\001\000\004\016\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\044\001\001\000\002\001\001\000" +
    "\004\007\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\051\004\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\070\001\001\000\002" +
    "\001\001\000\004\013\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\100\012\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\105\012\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\110\012\077\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoSql$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoSql$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoSql$do_action(act_num, parser, stack, top,this);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

    public void addConsultas(Consulta consultas) {
        this.consultas.add(consultas);
    }



    public String sinPuntoyComa; 
    public ArrayList<Consulta> consultas= new ArrayList<>(); 

    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        System.out.println("Error Sintactico Recuperado");
        System.out.println("\t \tLexema: "+ lexema);
        System.out.println("\t \tFila: "+ fila);
        System.out.println("\t \tColumna: "+ columna);

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        System.out.println("Error Sintactico Panic Mode");
        System.out.println("\t \tLexema: "+ lexema);
        System.out.println("\t \tFila: "+ fila);
        System.out.println("\t \tColumna: "+ columna);

    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoSql$actions {



  private final AnalizadorSintacticoSql parser;

  /** Constructor */
  CUP$AnalizadorSintacticoSql$actions(AnalizadorSintacticoSql parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoSql$do_action(
    int                        CUP$AnalizadorSintacticoSql$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoSql$parser,
    java.util.Stack            CUP$AnalizadorSintacticoSql$stack,
    int                        CUP$AnalizadorSintacticoSql$top,AnalizadorSintacticoSql ass)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoSql$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoSql$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // op ::= DIF 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		RESULT =op;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("op",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op ::= CERIG 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		RESULT =op;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("op",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // op ::= ABRIG 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		RESULT =op;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("op",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // op ::= CER 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		RESULT =op;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("op",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // op ::= ABR 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		RESULT= op;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("op",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // op ::= IGU 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		RESULT= op;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("op",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OpLog ::= OR 
            {
              Object RESULT =null;
		int OpLogleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int OpLogright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		Object OpLog = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		RESULT = OpLog;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("OpLog",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OpLog ::= AND 
            {
              Object RESULT =null;
		int OpLogleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int OpLogright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		Object OpLog = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		RESULT =OpLog;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("OpLog",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // relacional ::= NOMBRE op valUnico 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		Filtracion f = new Filtracion((String)col,((ArrayList<String>)val).get(0),Filtracion.operadorAtipo((String)op),null);
                                            ArrayList<Filtracion> fs = new ArrayList<>();
                                            fs.add(f);
                                            RESULT= fs;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("relacional",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // relacional ::= NOMBRE op valUnico OpLog relacional 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-4)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-4)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)).value;
		int OpLogleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).left;
		int OpLogright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).right;
		Object OpLog = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).value;
		int relleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		Filtracion f = new Filtracion((String)col,((ArrayList<String>)val).get(0),Filtracion.operadorAtipo((String)op),(String)OpLog);
                                                                        ArrayList<Filtracion> filtraciones= new ArrayList<>();
                                                                        filtraciones.add(f);
                                                                        for(int i=0;i<((ArrayList<Filtracion>)rel).size();i++){
                                                                        filtraciones.add(((ArrayList<Filtracion>)rel).get(i));
                                                                         }
                                                                         RESULT= filtraciones;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("relacional",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Filtracion ::= 
            {
              Object RESULT =null;
		RESULT =null;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("Filtracion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Filtracion ::= FILTRAR relacional 
            {
              Object RESULT =null;
		int filtracionesleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int filtracionesright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		Object filtraciones = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		ArrayList<Filtracion> fil = new ArrayList<>();
                                                for(int i=0;i<((ArrayList<Filtracion>)filtraciones).size();i++){
                                                fil.add(((ArrayList<Filtracion>)filtraciones).get(i));
                                                RESULT =fil;}
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("Filtracion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // columnasNom ::= NOMBRE 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		ArrayList<String> columnas = new ArrayList<>();
                                    columnas.add(nom);
                                    RESULT= columnas;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("columnasNom",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // columnasNom ::= NOMBRE COMA columnasNom 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)).value;
		int colNomleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int colNomright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		Object colNom = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		ArrayList<String> columnas = new ArrayList<>();
                                                    columnas.add(nom);
                                                    for(int i=0;i<((ArrayList<String>)colNom).size();i++){
                                                    columnas.add(((ArrayList<String>)colNom).get(i));
                                                    }
                                                    RESULT =columnas;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("columnasNom",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // columnas ::= columnasNom 
            {
              Object RESULT =null;
		int colNomleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int colNomright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		Object colNom = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		RESULT =colNom;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("columnas",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // columnas ::= POR 
            {
              Object RESULT =null;
		int columnasleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int columnasright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		Object columnas = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		RESULT= null;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("columnas",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // valUnico ::= NUM 
            {
              Object RESULT =null;
		int NUMleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int NUMright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		String NUM = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		ArrayList<String> val = new ArrayList<>();
                      val.add(NUM);   
                      RESULT= val;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("valUnico",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // valUnico ::= COM NOMBRE COM 
            {
              Object RESULT =null;
		int NOMBREleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).left;
		int NOMBREright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).right;
		String NOMBRE = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).value;
		ArrayList<String> val = new ArrayList<>();
                            val.add(NOMBRE);   
                            RESULT= val;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("valUnico",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // val ::= valUnico 
            {
              Object RESULT =null;
		int valUnicoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int valUnicoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		Object valUnico = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		RESULT= valUnico; 
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("val",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // val ::= NUM COMA val 
            {
              Object RESULT =null;
		int NUMleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)).left;
		int NUMright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)).right;
		String NUM = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		ArrayList<String> valores = new ArrayList<>();
                                valores.add((String)NUM); 
                                for(int i=0;i<((ArrayList<String>)vals).size();i++){
                                valores.add(((ArrayList<String>)vals).get(i));
                                }
                                RESULT =valores;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("val",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // val ::= COM NOMBRE COM COMA val 
            {
              Object RESULT =null;
		int NOMBREleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-3)).left;
		int NOMBREright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-3)).right;
		String NOMBRE = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-3)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		ArrayList<String> valores = new ArrayList<>();
                                valores.add((String)NOMBRE); 
                                for(int i=0;i<((ArrayList<String>)vals).size();i++){
                                valores.add(((ArrayList<String>)vals).get(i));
                                }
                                RESULT= valores;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("val",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // columIns ::= 
            {
              Object RESULT =null;
		RESULT =null;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("columIns",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // columIns ::= PARA columnasNom PARC 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).value;
		RESULT= col;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("columIns",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // asignacion ::= NOMBRE IGU valUnico 
            {
              Object RESULT =null;
		int NOMleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)).left;
		int NOMright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)).right;
		String NOM = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		ArrayList<String> as = new ArrayList<>();
                                    as.add((String)NOM);
                                    as.add(((ArrayList<String>)val).get(0));
                                    RESULT= as;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // asignacion ::= NOMBRE IGU valUnico COMA asignacion 
            {
              Object RESULT =null;
		int NOMleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-4)).left;
		int NOMright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-4)).right;
		String NOM = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		ArrayList<String> asignaciones = new ArrayList<>();
                                asignaciones.add(NOM); 
                                asignaciones.add(((ArrayList<String>)val).get(0)); 
                                for(int i=0;i<((ArrayList<String>)as).size();i++){
                                asignaciones.add(((ArrayList<String>)as).get(i));
                                }
                                RESULT = asignaciones;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E ::= ELIMINAR EN PATH Filtracion 
            {
              Object RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).value;
		int filtracionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int filtracionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		Object filtracion = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		Eliminar eliminar = new Eliminar((ArrayList<Filtracion>) filtracion,null,(String)path);
                                    RESULT = eliminar;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E ::= ACTUALIZAR EN PATH ASIGNAR asignacion Filtracion 
            {
              Object RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-3)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-3)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-3)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).value;
		int filtracionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int filtracionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		Object filtracion = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		Actualizar actualizar = new Actualizar((ArrayList<String>)asig,(ArrayList<Filtracion>)filtracion,null,(String)path);
                                                                            RESULT= actualizar;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // E ::= INSERTAR EN PATH columIns VALORES PARA val PARC 
            {
              Object RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-5)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-5)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-5)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-4)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-4)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-4)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).right;
		Object valores = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).value;
		Insertar insertar = new Insertar((ArrayList<String>)col,(ArrayList<String>) valores,null,(String)path);
                                                                         RESULT =insertar;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E ::= SELECCIONAR columnas EN PATH Filtracion 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-3)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-3)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-3)).value;
		int pathleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		Select s = new Select((ArrayList<String>)col,(ArrayList<Filtracion>)f,null,(String)path);
                                                            RESULT=s;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= E PC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).value;
		ass.addConsultas((Consulta)e);
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= E PC S 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.peek()).value;
		ass.addConsultas((Consulta)e);
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoSql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoSql$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.elementAt(CUP$AnalizadorSintacticoSql$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoSql$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoSql$parser.done_parsing();
          return CUP$AnalizadorSintacticoSql$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

