package emuladorsql.cup;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
 parser code 
{:
    public String sinPuntoyComa; 
    public ArrayList<Consulta> consultas; 

    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        System.out.println("Error Sintactico Recuperado");
        System.out.println("\t \tLexema: "+ lexema);
        System.out.println("\t \tFila: "+ fila);
        System.out.println("\t \tColumna: "+ columna);

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        System.out.println("Error Sintactico Panic Mode");
        System.out.println("\t \tLexema: "+ lexema);
        System.out.println("\t \tFila: "+ fila);
        System.out.println("\t \tColumna: "+ columna);

    }

:}

action code
{:
:}

    /* Terminals (tokens returned by the scanner). */
terminal           SELECCIONAR, INSERTAR, ACTUALIZAR,ELIMINAR,EN,FILTRAR, ASIGNAR,VALORES,PC,PARA,PARC,IGU,COMA,COM,POR,PUNTO,AND,OR,ABRIG,CERIG,DIF,ABR,CER,SINPUNTOYCOMA;
terminal String    NOMBRE,PATH,NUM, ERROR;
/* Non-terminals */
non terminal            Inicio,S,E,columnas,Filtracion,asignacion,columIns,val,valUnico,columnasNom,op,relacional,OpLog;

start with Inicio;
Inicio::= S;
S::= E:e PC S:s {:consultas.add((Consulta)e);:}
    
    |error PC S
    |;
E::= SELECCIONAR columnas:col EN PATH:path Filtracion:f {:Select s = new Select((ArrayList<String>)col,(ArrayList<Filtracion>)f,null,(String)path);
                                                            RESULT=s;:}
    | INSERTAR EN PATH:path columIns:col VALORES PARA val:valores PARC {:Insertar insertar = new Insertar((ArrayList<String>)col,(ArrayList<String>) valores,null,(String)path);
                                                                         RESULT =insertar;:}

    |ACTUALIZAR EN PATH:path ASIGNAR asignacion:asig Filtracion:filtracion{:Actualizar actualizar = new Actualizar((ArrayList<String>)asig,(ArrayList<String>)filtracion,null,(String)path);
                                                                            RESULT= actualizar;:}
    | ELIMINAR EN PATH:path Filtracion:filtracion {:Eliminar eliminar = new Eliminar((ArrayList<Filtracion>) filtracion,null,(String)path);
                                    RESULT = eliminar;:} ;

asignacion::=  NOMBRE:NOM IGU valUnico:val COMA asignacion:as {:ArrayList<String> asignaciones = new ArrayList<>();
                                asignaciones.add(NOM); 
                                asignaciones.add(val); 
                                for(int i=0,i<((ArrayList<String>)as).size();i++){
                                asignaciones.add(((ArrayList<String>)as).get(i));
                                }
                                RESULT = asignaciones;:}
		|NOMBRE:NOM IGU valUnico:val {:ArrayList<String> as = new ArrayList<>();
                                    as.add((String)NOM);
                                    as.add((String)val);
                                    RESULT= as;:}; 
columIns::= PARA columnasNom:col PARC {:RESULT= col;:}
		| {:RESULT =null;:};
val ::= COM NOMBRE:NOMBRE COM COMA val:vals {:ArrayList<String> valores = new ArrayList<>();
                                valores.add((String)NOMBRE); 
                                for(int i=0;i<((ArrayList<String>)vals).size();i++){
                                valores.add(((ArrayList<String>)vals).get(i));
                                }
                                RESULT= valores;:}
	|NUM:NUM COMA val:vals {:ArrayList<String> valores = new ArrayList<>();
                                valores.add((String)NUM); 
                                for(int i=0;i<((ArrayList<String>)vals).size();i++){
                                valores.add(((ArrayList<String>)vals).get(i));
                                }
                                RESULT =valores;:}
	|valUnico:valUnico {:RESULT= valUnico; :};
valUnico ::= COM NOMBRE:NOMBRE COM{:ArrayList<String> val = new ArrayList<>();
                            val.add(NOMBRE);   
                            RESULT= val;:}
		|NUM:NUM {:ArrayList<String> val = new ArrayList<>();
                      val.add(NUM);   
                      RESULT= val;:};
columnas     ::= POR:columnas {:RESULT= null;:}
		| columnasNom:colNom {:RESULT =colNom;:};
columnasNom ::= NOMBRE:nom COMA columnasNom:colNom {:ArrayList<String> columnas = new ArrayList<>();
                                                    columnas.add(nom);
                                                    for(int i=0;i<((ArrayList<String>)colNom).size();i++){
                                                    columnas.add(((ArrayList<String>)colNom).get(i));
                                                    }
                                                    RESULT =columnas;:}   
			| NOMBRE:nom {:ArrayList<String> columnas = new ArrayList<>();
                                    columnas.add(nom);
                                    RESULT= columnas;:};

Filtracion ::= FILTRAR  relacional:filtraciones {:ArrayList<Filtracion> fil = new ArrayList<>();
                                                for(int i=0;i<((ArrayList<Filtracion>)filtraciones).size();i++){
                                                fil.add(((ArrayList<Filtracion>)filtraciones).get(i));
                                                RESULT =fil;}:}
                |  {:RESULT =null;:};                   
relacional::=NOMBRE:col op:op valUnico:val OpLog:OpLog relacional:rel {:Filtracion f = new Filtracion((String)col,(String)val,Filtracion.operadorAtipo((String)op),(String)OpLog);
                                                                        ArrayList<Filtracion> filtraciones= new ArrayList<>();
                                                                        filtraciones.add(f);
                                                                        for(int i=0;i<((ArrayList<Filtracion>)rel).size();i++){
                                                                        filtraciones.add(((ArrayList<Filtracion>)rel).get(i));
                                                                         }
                                                                         RESULT= filtraciones;:}


            |NOMBRE:col op:op valUnico:val {:Filtracion f = new Filtracion((String)col,((ArrayList<String>)val).get(0),Filtracion.operadorAtipo((String)op),null);
                                            ArrayList<Filtracion> fs = new ArrayList<>();
                                            fs.add(f);
                                            RESULT= fs;:};
OpLog ::= AND:OpLog {:RESULT =OpLog;:}
		| OR:OpLog {:RESULT = OpLog;:};
op ::= IGU:op {:RESULT= op;:}
        |ABR:op {:RESULT= op;:}
        |CER:op {:RESULT =op;:}
        |ABRIG:op {:RESULT =op;:}
        |CERIG:op {:RESULT =op;:}
        |DIF:op {:RESULT =op;:};